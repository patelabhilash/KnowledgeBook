package app;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 * matrixmedian
 */
public class Matrixmedian {

    public static void main(final String[] args) {
        Matrixmedian app = new Matrixmedian();
        final ArrayList<ArrayList<Integer>> A = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> row1 = new ArrayList<Integer>(Arrays.asList(5, 6, 6, 10, 11, 12, 12, 12, 15, 16));
        ArrayList<Integer> row2 = new ArrayList<Integer>(Arrays.asList(18, 18, 19, 21, 21, 21, 22, 22, 23, 24));
        ArrayList<Integer> row3 = new ArrayList<Integer>(Arrays.asList(29, 32, 32, 32, 33, 34, 34, 34, 35, 40));
        ArrayList<Integer> row4 = new ArrayList<Integer>(Arrays.asList(40, 42, 42, 43, 44, 46, 46, 47, 47, 47));
        ArrayList<Integer> row5 = new ArrayList<Integer>(Arrays.asList(48, 48, 48, 50, 51, 51, 51, 51, 51, 52));
        ArrayList<Integer> row6 = new ArrayList<Integer>(Arrays.asList(53, 56, 57, 59, 59, 60, 61, 61, 61, 63));
        ArrayList<Integer> row7 = new ArrayList<Integer>(Arrays.asList(63, 64, 64, 65, 65, 65, 67, 67, 67, 67));
        ArrayList<Integer> row8 = new ArrayList<Integer>(Arrays.asList(70, 73, 74, 74, 74, 75, 75, 79, 79, 81));
        ArrayList<Integer> row9 = new ArrayList<Integer>(Arrays.asList(82, 83, 83, 84, 84, 85, 86, 88, 89, 91));
        ArrayList<Integer> row10 = new ArrayList<Integer>(Arrays.asList(91, 91, 95, 95, 96, 96, 97, 99, 100, 100));
        A.add(row1);
        A.add(row2);
        A.add(row3);
        A.add(row4);
        A.add(row5);
        A.add(row6);
        A.add(row7);
        A.add(row8);
        A.add(row9);
        A.add(row10);


        int B = 96; 
        // System.out.println( app.searchMatrix(A, B));

        ArrayList<ArrayList<Integer>> printer = app.prettyPrint(3);
        for (ArrayList<Integer> arrayList : printer) {
            for (Integer inte : arrayList) {
                System.out.print(inte+"\t");
            }
            System.out.println();
        }

    }

    public int findMedian(final ArrayList<ArrayList<Integer>> A) {
        if (A == null || A.size() == 0) {
            return 0;
        }
        final int norows = A.size();
        final int nocols = A.get(0).size();
        final int nototal = (norows * nocols);
        final int medianpos = nototal / 2;

        ArrayList<Integer> flatarr = new ArrayList<Integer>();
        // Integer[] flatarr = new Integer[nototal*2];

        for (int i = 0; i < norows; i++) {
            if (A.get(i) != null) {
                for (int j = 0; j < nocols; j++) {
                    flatarr.add(A.get(i).get(j));
                }
            }
        }
        Collections.sort(flatarr);
        return flatarr.get(medianpos);
    }

    public int searchMatrix(ArrayList<ArrayList<Integer>> A, int B) {
        if (A == null || A.size() == 0) {
            return 0;
        }

        final int norows = A.size();
        final int nocols = A.get(0).size();
        final int nototal = (norows * nocols);

        if (A.get(norows - 1).get(nocols - 1) < B || A.get(0).get(0) > B) {
            return 0;
        }
        if(A.get(norows - 1).get(nocols - 1) == B){
            return 1;
        }

        int lowposrow = -1;
        int low = 0;
        int high = norows - 1;
        int mid = -1;
        int midval = -1;
        if(B > A.get(high).get(0)){
            lowposrow = high;
        }else{

            while (low < high) {
    
                mid = (low + high) / 2;
                midval = A.get(mid).get(0);
               
                if (midval == B) {
                    return 1;
                }
                if (low == mid) {
                    break;
                }
                if (midval > B) {
                    high = mid;
                } else {
                    low = mid;
                }
                
            }
            lowposrow = low;
        }
        // declarations
        low =0;
        high = nocols;
        while (low < high) {
            mid = (low + high) / 2;
            midval = A.get(lowposrow).get(mid);
            if (midval == B) {
                return 1;
            }
            if (low == mid) {
                break;
            }
            if (midval > B) {
                high = mid;
            } else {
                low = mid;
            }
            
        }

        return 0;
    }

    public ArrayList<ArrayList<Integer>> prettyPrint(int A) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        if(A<=0){
            return null;
        }
        int sqlen = 2*A-1;
        int compi = -1;
        int compj = -1;
        ArrayList<Integer> templist = new ArrayList<Integer>();
        for (int i = 0; i < sqlen; i++) {
            for (int j = 0; j < sqlen; j++) {
                if(i>=(sqlen-1)/2){
                    compi= i - (sqlen-1)/2;
                }else{
                    compi = i;
                }
                if(j>=(sqlen-1)/2){
                    compj= j-(sqlen-1)/2;
                }else{
                    compj = j;
                }
                templist.add(Math.max(A-compi, A-compj));
            }
            ans.add(templist);
            templist = new ArrayList<Integer>();
        }


    return ans;
    }
}
